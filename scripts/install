#!/bin/bash

# Install script for the uber project
# This script installs the uber binary to an appropriate location using GoReleaser

set -e # Exit on any error

# Source shared utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/lib/utils.sh"

# Default values
OUTPUT_PATH=""
VERBOSE=false
DRY_RUN=false

# Function to show help
show_install_help() {
  show_help "$0" "[OPTIONS]" \
    "This script installs the uber binary to an appropriate location using GoReleaser." \
    "  -o, --output PATH    Specify custom installation path
  -v, --verbose        Enable verbose output
  --dry-run            Show where uber would be installed without building
  -h, --help           Show this help message" \
    "The script will automatically choose an installation location:
  1. ~/.local/bin (if in PATH)
  2. ~/bin (if in PATH)
  3. Custom path (if specified with --output)
  4. Current directory (if no suitable existing location found)"
}

# Function to parse command line arguments
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -o | --output)
      OUTPUT_PATH="$2"
      shift 2
      ;;
    -v | --verbose)
      VERBOSE=true
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    -h | --help)
      show_install_help
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use -h or --help for usage information"
      exit 1
      ;;
    esac
  done
}

# Function to check if a directory is in PATH
is_in_path() {
  local dir="$1"
  if [[ ":$PATH:" == *":$dir:"* ]]; then
    return 0
  else
    return 1
  fi
}

# Function to check if a directory is writable
is_writable() {
  local dir="$1"
  if [ -w "$dir" ] 2>/dev/null; then
    return 0
  else
    return 1
  fi
}

# Function to determine installation location
determine_install_location() {
  INSTALL_PATH=""

  if [ -n "$OUTPUT_PATH" ]; then
    # User specified custom path
    INSTALL_PATH="$OUTPUT_PATH"
    if [ "$VERBOSE" = true ]; then
      print_info "Using custom installation path: $INSTALL_PATH"
    fi
  else
    # Try to find the best automatic location

    # Check ~/.local/bin (common user-local bin directory)
    if [ -d "$HOME/.local/bin" ] && is_in_path "$HOME/.local/bin" && is_writable "$HOME/.local/bin"; then
      INSTALL_PATH="$HOME/.local/bin/uber"
      if [ "$VERBOSE" = true ]; then
        print_info "Found ~/.local/bin in PATH and writable"
      fi
    # Check ~/bin (common user bin directory)
    elif [ -d "$HOME/bin" ] && is_in_path "$HOME/bin" && is_writable "$HOME/bin"; then
      INSTALL_PATH="$HOME/bin/uber"
      if [ "$VERBOSE" = true ]; then
        print_info "Found ~/bin in PATH and writable"
      fi
    else
      # Fallback to current directory
      INSTALL_PATH="$PROJECT_ROOT/uber-installed"
      if [ "$VERBOSE" = true ]; then
        print_info "No suitable existing PATH location found, installing to: $INSTALL_PATH"
      fi
    fi
  fi

  # Create directory if it doesn't exist (for custom paths)
  INSTALL_DIR=$(dirname "$INSTALL_PATH")
  ensure_dir "$INSTALL_DIR" "$VERBOSE"

  # Check if we can write to the installation location
  if ! is_writable "$INSTALL_DIR"; then
    print_error "Cannot write to installation directory: $INSTALL_DIR"
    print_info "Try running with sudo or specify a different location with --output"
    exit 1
  fi
}

# Function to handle dry-run mode
handle_dry_run() {
  print_header "=== Dry Run Mode ==="
  print_info "Uber would be installed to: $INSTALL_PATH"
  echo ""
  print_info "Installation details:"
  echo "  Source: $PROJECT_ROOT (using GoReleaser)"
  echo "  Target: $INSTALL_PATH"
  echo "  Directory: $INSTALL_DIR"
  echo ""

  if is_in_path "$INSTALL_DIR"; then
    print_success "The installation directory is in your PATH"
    print_info "You would be able to run: uber <command>"
  else
    print_warning "The installation directory is NOT in your PATH"
    print_info "You would need to run: $INSTALL_PATH <command>"
  fi
  echo ""
  print_info "To actually install, run without --dry-run"
  exit 0
}

# Function to check if GoReleaser is available
check_goreleaser() {
  if ! command -v goreleaser &>/dev/null; then
    print_error "GoReleaser is not installed or not in PATH"
    print_info "Please install GoReleaser first:"
    echo "  go install github.com/goreleaser/goreleaser@latest"
    exit 1
  fi
}

# Function to install the binary using GoReleaser
install_binary() {
  print_info "Building uber using GoReleaser..."

  # Build for current platform using GoReleaser
  if [ "$VERBOSE" = true ]; then
    print_info "Running: goreleaser build --single-target --snapshot --clean"
  fi

  goreleaser build --single-target --snapshot --clean

  # Find the built binary
  local os_name
  local arch_name

  case "$(uname -s)" in
  Darwin*) os_name="darwin" ;;
  Linux*) os_name="linux" ;;
  CYGWIN* | MINGW32* | MSYS* | MINGW*) os_name="windows" ;;
  *) print_error "Unsupported operating system: $(uname -s)" && exit 1 ;;
  esac

  case "$(uname -m)" in
  x86_64) arch_name="amd64" ;;
  arm64 | aarch64) arch_name="arm64" ;;
  *) print_error "Unsupported architecture: $(uname -m)" && exit 1 ;;
  esac

  local built_binary="dist/uber_${os_name}_${arch_name}/uber"

  if [ ! -f "$built_binary" ]; then
    print_error "GoReleaser build failed - binary not found at: $built_binary"
    exit 1
  fi

  print_info "Copying binary to: $INSTALL_PATH"
  cp "$built_binary" "$INSTALL_PATH"

  print_success "Uber installed successfully!"
  echo ""

  # Verify installation
  if [ -f "$INSTALL_PATH" ] && [ -x "$INSTALL_PATH" ]; then
    print_success "Installation verified: $INSTALL_PATH is executable"
  else
    print_error "Installation verification failed"
    exit 1
  fi
}

# Function to show installation summary
show_installation_summary() {
  echo ""
  print_header "=== Installation Complete ==="
  print_info "Uber has been installed to: $INSTALL_PATH"
  echo ""

  if is_in_path "$INSTALL_DIR"; then
    print_success "The installation directory is in your PATH"
    print_info "You can now use uber from anywhere by running: uber <command>"
  else
    print_warning "The installation directory is NOT in your PATH"
    print_info "To use uber, you'll need to:"
    echo "  1. Add $INSTALL_DIR to your PATH, or"
    echo "  2. Run uber using the full path: $INSTALL_PATH <command>"
  fi

  echo ""
  print_info "Example usage:"
  echo "  uber --help                    # Show help"
  echo "  uber <tool-name> [arguments]   # Run a tool"
}

# Main function
main() {
  # Parse command line arguments
  parse_arguments "$@"

  # Change to project root
  cd_project_root

  print_header "=== Uber Installation (GoReleaser) ==="
  echo ""

  # Check if GoReleaser is available
  check_goreleaser

  # Determine installation location
  determine_install_location

  # Handle dry-run mode
  if [ "$DRY_RUN" = true ]; then
    handle_dry_run
  fi

  # Install the binary
  install_binary

  # Show installation summary
  show_installation_summary
}

# Call main function with all arguments
main "$@"

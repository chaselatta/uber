#!/bin/bash

# Release script for uber
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default increment type
INCREMENT_TYPE="patch"

# Function to print colored output
print_color() {
  local color=$1
  local message=$2
  echo -e "${color}${message}${NC}"
}

# Function to show help
show_help() {
  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  --patch, -p    Increment patch version (default)"
  echo "  --minor, -m    Increment minor version"
  echo "  --major, -M    Increment major version"
  echo "  --help, -h     Show this help message"
  echo ""
  echo "Examples:"
  echo "  $0              # Suggest next patch version"
  echo "  $0 --minor      # Suggest next minor version"
  echo "  $0 --major      # Suggest next major version"
}

# Function to parse command line arguments
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    --patch | -p)
      INCREMENT_TYPE="patch"
      shift
      ;;
    --minor | -m)
      INCREMENT_TYPE="minor"
      shift
      ;;
    --major | -M)
      INCREMENT_TYPE="major"
      shift
      ;;
    --help | -h)
      show_help
      exit 0
      ;;
    *)
      print_color $RED "Unknown option: $1"
      show_help
      exit 1
      ;;
    esac
  done
}

# Function to get the latest version tag
get_latest_version() {
  local latest_tag=$(git tag --sort=-version:refname | head -1)
  if [ -z "$latest_tag" ]; then
    echo "v0.0.0"
  else
    echo "$latest_tag"
  fi
}

# Function to suggest next version
suggest_next_version() {
  local current_version=$1
  local increment_type=$2

  # Extract major, minor, patch from current version
  if [[ $current_version =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
    local major=${BASH_REMATCH[1]}
    local minor=${BASH_REMATCH[2]}
    local patch=${BASH_REMATCH[3]}

    case $increment_type in
    "major")
      local next_major=$((major + 1))
      echo "v${next_major}.0.0"
      ;;
    "minor")
      local next_minor=$((minor + 1))
      echo "v${major}.${next_minor}.0"
      ;;
    "patch" | *)
      local next_patch=$((patch + 1))
      echo "v${major}.${minor}.${next_patch}"
      ;;
    esac
  else
    echo "v0.0.1"
  fi
}

# Function to validate version format
validate_version() {
  local version=$1
  if [[ ! $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    print_color $RED "Error: Version must be in format vX.Y.Z (e.g., v1.0.0)"
    return 1
  fi
  return 0
}

# Function to check if tag already exists
check_tag_exists() {
  local version=$1
  if git tag -l | grep -q "^$version$"; then
    print_color $RED "Error: Tag $version already exists"
    return 1
  fi
  return 0
}

# Function to check git status
check_git_status() {
  if ! git diff-index --quiet HEAD --; then
    print_color $YELLOW "Warning: You have uncommitted changes"
    read -p "Do you want to continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      print_color $RED "Release cancelled"
      exit 1
    fi
  fi
}

# Main release process
main() {
  # Parse command line arguments
  parse_arguments "$@"

  print_color $BLUE "=== Uber Release Script ==="
  echo

  # Check git status
  check_git_status

  # Get current branch
  current_branch=$(git branch --show-current)
  print_color $GREEN "Current branch: $current_branch"
  echo

  # Get current and suggested versions
  local current_version=$(get_latest_version)
  local suggested_version=$(suggest_next_version "$current_version" "$INCREMENT_TYPE")

  print_color $BLUE "Current version: $current_version"
  print_color $BLUE "Increment type: $INCREMENT_TYPE"
  print_color $BLUE "Suggested next version: $suggested_version"
  echo

  # Prompt for version
  while true; do
    read -p "Enter version (e.g., $suggested_version): " version
    if [ -z "$version" ]; then
      version="$suggested_version"
      print_color $GREEN "Using suggested version: $version"
      break
    elif validate_version "$version"; then
      break
    fi
  done

  # Check if tag already exists
  if ! check_tag_exists "$version"; then
    exit 1
  fi

  # Create release branch name
  release_branch="release/$version"
  print_color $BLUE "Release branch will be: $release_branch"
  echo

  # Confirm before proceeding
  print_color $YELLOW "This will:"
  echo "  1. Create branch: $release_branch"
  echo "  2. Create tag: $version"
  echo "  3. Push branch and tag to origin"
  echo "  4. Trigger GitHub Actions release workflow"
  echo

  read -p "Proceed with release? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_color $RED "Release cancelled"
    exit 1
  fi

  # Create and switch to release branch
  print_color $BLUE "Creating release branch..."
  git checkout -b "$release_branch"

  # Create tag
  print_color $BLUE "Creating tag $version..."
  git tag "$version"

  # Push branch and tag
  print_color $BLUE "Pushing to origin..."
  git push origin "$release_branch"
  git push origin "$version"

  print_color $GREEN "=== Release Complete ==="
  print_color $GREEN "Branch: $release_branch"
  print_color $GREEN "Tag: $version"
  print_color $GREEN "GitHub Actions will now build and release the binaries"
  echo
  print_color $BLUE "You can monitor the release at:"
  print_color $BLUE "https://github.com/chaselatta/uber/actions"
}

# Run main function
main "$@"

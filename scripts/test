#!/bin/bash

# Test script for the uber project
# Usage: test [test_name]
#   - If no arguments provided, runs all tests
#   - If test_name provided, runs that specific test

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
  echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
  echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
  echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
  echo -e "${RED}❌ $1${NC}"
}

# Function to setup project root
setup_project_root() {
  # Use UBER_PROJECT_ROOT if available (when run through uber)
  # Otherwise fall back to calculating it from script location
  if [ -n "$UBER_PROJECT_ROOT" ]; then
    PROJECT_ROOT="$UBER_PROJECT_ROOT"
    print_info "Using uber project root: $PROJECT_ROOT"
  else
    # Fallback for direct execution
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
    print_warning "UBER_PROJECT_ROOT not set, using calculated project root: $PROJECT_ROOT"
  fi

  # Change to project root
  cd "$PROJECT_ROOT"
}

# Function to check prerequisites
check_prerequisites() {
  # Check if Go is available
  if ! command -v go &>/dev/null; then
    print_error "Go is not installed or not in PATH"
    exit 1
  fi
}

# Function to run all tests
run_all_tests() {
  print_info "Running all tests..."
  go test -v ./...
}

# Function to run a specific test
run_specific_test() {
  local test_name="$1"
  print_info "Running test: $test_name"

  # Check if the test exists
  if ! go test -list "$test_name" ./... | grep -q "$test_name"; then
    print_error "Test '$test_name' not found"
    print_info "Available tests:"
    go test -list . ./... | grep -E "^Test[A-Z]" | sort
    exit 1
  fi

  # Run the specific test
  go test -v -run "^${test_name}$" ./...
}

# Main function
main() {
  # Setup project root
  setup_project_root

  # Check prerequisites
  check_prerequisites

  # Main logic
  if [ $# -eq 0 ]; then
    # No arguments provided, run all tests
    run_all_tests
  else
    # Arguments provided, run specific test
    run_specific_test "$1"
  fi

  print_success "Test execution completed!"
}

# Call main function with all arguments
main "$@"
